{"version":3,"sources":["components/card-component/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box-compoment.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","key","SearchBox","placeholder","handleChange","onChange","App","e","setState","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"o9JAGaA,G,kBAAO,SAACC,GACjB,OACI,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eAElB,4BAAKL,EAAMI,QAAQE,MACnB,4BAAKN,EAAMI,QAAQG,UCHlBC,EAAW,SAAAR,GAExB,OADAS,QAAQC,IAAIV,GACN,yBAAKC,UAAU,aACpBD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OAC3B,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,S,OCNnBU,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACAf,UAAU,SACVc,YAAaA,EACbE,SAAUD,MC8CCE,E,kDA/Cb,aAAe,IAAD,8BACZ,gBAmBFF,aAAe,SAACG,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAnBrC,EAAKC,MAAQ,CACXb,WACAU,YAAa,IAJH,E,qDAuBJ,IAAD,EACwBI,KAAKD,MAA7Bb,EADA,EACAA,SAASU,EADT,EACSA,YACVK,EAAmBf,EAASgB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQE,KAAKsB,cAAcC,SAASR,EAAYO,kBAElD,OACE,yBAAK3B,UAAY,OAClB,iEAEA,kBAAC,EAAD,CAEAc,YAAY,gBACZC,aAAeS,KAAKT,eAGnB,kBAAC,EAAD,CAAUL,SAAUe,S,GAvCRI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.24326c47.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => {\n    return (\n        <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`}\n        />\n            <h1>{props.monster.name}</h1>\n            <h2>{props.monster.email}</h2>\n        </div>\n    )\n}\n","import React from 'react';\nimport './card-list.styles.css'\nimport {Card} from '../card-component/card.component'\n\n\n\nexport const CardList = props => {\nconsole.log(props);\nreturn<div className='card-list'>\n{props.monsters.map(monster => (\n<Card key={monster.id} monster={monster}/>\n))}\n</div>;\n};","import React from 'react';\nimport './search-box-styles.css';\n\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n    className='search' \n    placeholder={placeholder} \n    onChange={handleChange}\n    />\n   // onChange={e => {this.setState({searchField: e.target.value}, () => \n \n  );\n    \n   \n\n","import React,{Component} from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {CardList} from './components/card-list/card-list.component'\nimport monsters from './usersdata.json';\nimport {SearchBox} from './components/search-box/search-box-compoment'\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters,\n      searchField: ''\n    \n    };\n  }\n\n/*\n  componentDidMount(){\n  \n      console.log(\"try\")\n\n      fetch('./usersdata.json')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));\n    \n  \n  }*/\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  } \n  render() {\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()) );\n\n    return (\n      <div className = \"App\">\n     <h1> International Robots Association\n     </h1>\n     <SearchBox\n\n     placeholder='Filter Search' \n     handleChange= {this.handleChange}\n     \n     />\n      <CardList monsters={filteredMonsters}/>\n\n        </div>\n    );\n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}